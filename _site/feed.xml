<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko-KR, en-US"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="ko-KR, en-US" /><updated>2023-03-14T21:20:34+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">MIN</title><subtitle>Minnnn GitHub Blog
</subtitle><author><name>KIM MINGYU</name><email>tommp1055@gmail.com</email></author><entry><title type="html">[Code]선택정렬 Java</title><link href="http://localhost:4000/blog/code/2023-03-14-code-sort/" rel="alternate" type="text/html" title="[Code]선택정렬 Java" /><published>2023-03-14T00:00:00+09:00</published><updated>2023-03-14T21:17:55+09:00</updated><id>http://localhost:4000/blog/code/code-sort</id><content type="html" xml:base="http://localhost:4000/blog/code/2023-03-14-code-sort/"><![CDATA[<ul id="markdown-toc">
  <li><a href="#자바코드java" id="markdown-toc-자바코드java">자바코드.java</a></li>
</ul>

<h2 id="자바코드java">자바코드.java</h2>
<p><strong><em>파이썬과 구조는 같다.</em></strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Selection</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// 랜덤 시작 부분</span>
        <span class="kd">final</span> <span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">numList</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">number</span><span class="o">];</span>

        <span class="nc">Random</span> <span class="n">ran</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">number</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="n">numList</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">number</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">ran</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">number</span><span class="o">)+</span><span class="mi">1</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">numList</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">temp</span><span class="o">){</span>
                <span class="n">i</span><span class="o">--;</span>
            <span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">numList</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
                <span class="n">numList</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span> <span class="o">:</span> <span class="n">numList</span><span class="o">){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">a</span><span class="o">+</span><span class="s">", "</span><span class="o">);</span>
        <span class="o">}</span>
 
        <span class="c1">// 정렬 시작 부분</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">number</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="kt">int</span> <span class="n">minIndex</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">number</span><span class="o">;</span> <span class="n">j</span><span class="o">++){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">numList</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">numList</span><span class="o">[</span><span class="n">minIndex</span><span class="o">]){</span>
                    <span class="n">minIndex</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="kt">int</span> <span class="n">minValue</span> <span class="o">=</span> <span class="n">numList</span><span class="o">[</span><span class="n">minIndex</span><span class="o">];</span>
            <span class="n">numList</span><span class="o">[</span><span class="n">minIndex</span><span class="o">]</span> <span class="o">=</span> <span class="n">numList</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="n">numList</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">minValue</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">b:</span> <span class="n">numList</span><span class="o">){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">b</span><span class="o">+</span><span class="s">", "</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name>KIM MINGYU</name><email>tommp1055@gmail.com</email></author><category term="blog" /><category term="code" /><category term="sort" /></entry><entry><title type="html">[Sort]선택정렬 Selection</title><link href="http://localhost:4000/blog/algorithm/2023-03-11-algorithm-sort/" rel="alternate" type="text/html" title="[Sort]선택정렬 Selection" /><published>2023-03-11T00:00:00+09:00</published><updated>2023-03-14T20:40:22+09:00</updated><id>http://localhost:4000/blog/algorithm/algorithm-sort</id><content type="html" xml:base="http://localhost:4000/blog/algorithm/2023-03-11-algorithm-sort/"><![CDATA[<ul id="markdown-toc">
  <li><a href="#선택-정렬-selection-sort" id="markdown-toc-선택-정렬-selection-sort">선택 정렬 (Selection Sort)</a>    <ul>
      <li><a href="#0_개요" id="markdown-toc-0_개요">0_개요</a></li>
      <li><a href="#1_-준비하기" id="markdown-toc-1_-준비하기">1_ 준비하기</a></li>
      <li><a href="#2_-code-선택정렬" id="markdown-toc-2_-code-선택정렬">2_ [Code] 선택정렬</a></li>
      <li><a href="#3_-debug-동작설명" id="markdown-toc-3_-debug-동작설명">3_ [Debug] 동작설명</a></li>
      <li><a href="#4_-시간복잡도-번외" id="markdown-toc-4_-시간복잡도-번외">4_ [시간복잡도] 번외</a></li>
      <li><a href="#5_-최종코드" id="markdown-toc-5_-최종코드">5_ 최종코드</a></li>
    </ul>
  </li>
</ul>

<p><strong><em>정렬의 종류</em></strong></p>
<ul>
  <li>선택 정렬 (Selection Sort)</li>
  <li>버블 정렬 (Bubble Sort)</li>
  <li>삽입 정렬 (Insertion Sort)</li>
  <li>퀵 정렬 (Quick Sort)</li>
  <li>병합 정렬 (Merge Sort)</li>
  <li>힙 정렬 (Heap Sort)
<br /></li>
</ul>

<h1 id="선택-정렬-selection-sort">선택 정렬 (Selection Sort)</h1>
<hr />
<h2 id="0_개요">0_개요</h2>
<hr />
<p><strong><em>선택 정렬은 맨 앞의 요소부터 순차적으로 최솟값만을 찾아서 정렬한다.</em></strong> <br />
선택 정렬은 가장 <strong>단순한 정렬 알고리즘</strong>으로 최악의 효율을 지니고있다. <br />
<strong>시간복잡도는 n^2</strong>
진행할수록 배열의 앞쪽요소는 정렬된다.</p>

<h2 id="1_-준비하기">1_ 준비하기</h2>
<hr />
<p><strong><em>숫자 1부터 100까지 무작위로 10개 뽑는 코드.py</em></strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.py
</span><span class="kn">import</span> <span class="n">random</span> <span class="k">as</span> <span class="n">num</span>              <span class="c1"># random 함수사용을 위한 import
</span>
<span class="n">num_list</span> <span class="o">=</span> <span class="p">[]</span>                     <span class="c1"># 비어있는 리스트 선언
</span>
<span class="k">while</span> <span class="nf">len</span><span class="p">(</span><span class="n">num_list</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>         <span class="c1"># 리스트의 크기가 10개가 될 때까지 반복
</span>
    <span class="c1"># randrang(start, stop, step) - 어디부터 어디까지 숫자 몇 간격으로 무작위를 뽑겠다
</span>    <span class="n">temp</span> <span class="o">=</span> <span class="n">num</span><span class="p">.</span><span class="nf">randrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">101</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># 무작위로 1~100까지 뽑아서 temp 임시변수에 삽입
</span>
    <span class="k">if</span> <span class="n">temp</span> <span class="ow">in</span> <span class="n">num_list</span><span class="p">:</span>          <span class="c1"># 해당 값이 리스트안에 있다면 패스
</span>        <span class="k">continue</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">num_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>     <span class="c1"># 없다면 리스트에 삽입
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">num_list</span><span class="p">)</span> <span class="c1"># 무작위로 섞인 10가지 숫자 출력
</span></code></pre></div></div>

<h2 id="2_-code-선택정렬">2_ [Code] 선택정렬</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># selection.py
</span><span class="k">def</span> <span class="nf">sort</span><span class="p">(</span><span class="n">num_list</span><span class="p">):</span>             <span class="c1"># 위(main.py)에서 생성한 list를 매개변수로 받아온다.
</span>
    <span class="c1">#첫번째 반복문
</span>    <span class="c1">#num_list의 크기만큼 반복을 한다.
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">num_list</span><span class="p">)):</span> 
        <span class="n">min_index</span> <span class="o">=</span> <span class="n">i</span> <span class="c1"># 첫번째 반복문이 실행될 때마다 현재 위치의 INDEX값을 저장한다.
</span>
        <span class="c1">#두번째 반복문 시작
</span>        <span class="c1">#첫번째 반복문의 인덱스값의 +1 한 위치부터 반복을 시작한다.
</span>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">num_list</span><span class="p">)):</span>

            <span class="c1">#만약 리스트의 현재위치(j번째)의 값이 최소값이 있는 위치의 값보다 작을경우
</span>            <span class="k">if</span> <span class="n">num_list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">num_list</span><span class="p">[</span><span class="n">min_index</span><span class="p">]:</span> 
                <span class="n">min_index</span> <span class="o">=</span> <span class="n">j</span> <span class="c1"># 현재위치(j번째) INDEX를 min_value에 저장한다.
</span>
        <span class="c1">#두번째 반복문 끝
</span>        <span class="c1">#이때 리스트의 i번째보다 작은 값을 가진 인덱스값(min_index)이 정해진다.
</span>
        <span class="n">min_value</span> <span class="o">=</span> <span class="n">num_list</span><span class="p">[</span><span class="n">min_index</span><span class="p">]</span> <span class="c1"># 서로 위치를 바꾸기 위한 임시변수
</span>        <span class="c1">#min_value에 num_list의 최솟값이 있는 INDEX를 이용하여 값을 저장한다.
</span>
        <span class="c1"># 최솟값과 현재값(i번째의 값)을 바꿔주는 과정
</span>        <span class="n">num_list</span><span class="p">[</span><span class="n">min_index</span><span class="p">]</span> <span class="o">=</span> <span class="n">num_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">num_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">min_value</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">num_list</span><span class="p">)</span> <span class="c1"># 정렬된 10가지 숫자 출력
</span></code></pre></div></div>

<h2 id="3_-debug-동작설명">3_ [Debug] 동작설명</h2>
<p><strong><em>3-0) num_list[10]</em></strong></p>

<table>
  <thead>
    <tr>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>6</th>
      <th>7</th>
      <th>8</th>
      <th>9</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>33</td>
      <td>55</td>
      <td>19</td>
      <td>37</td>
      <td>4</td>
      <td>48</td>
      <td>56</td>
      <td>26</td>
      <td>61</td>
      <td>79</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>첫번째 줄 인덱스, 두번째 줄 무작위 요소 <br />
맨 처음 실행시 0번 요소부터 시작. <br />
<strong>위의 표는 무작위 10개의 난수로 위 코드 실행 시 다를 수 있습니다.</strong></p>
</blockquote>

<p><br /></p>

<p><strong><em>3-1) 첫번째 반복문 : i는 0부터 num_list의 크기(&lt;10)까지 반복</em></strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">num_list</span><span class="p">)):</span> 
        <span class="n">min_index</span> <span class="o">=</span> <span class="n">i</span> 
</code></pre></div></div>
<p><strong>설명</strong> <br />
실행시 i번의 값을 min_index에 저장한다.</p>
<blockquote>
  <p>min_index = 0 [반복할때마다 1씩 증가하여 num_list의 최대길이(9)까지]</p>
</blockquote>

<p><br /></p>

<p><strong><em>3-2) 두번째 반복문 : j는 i+1부터 num_list의 크기(&lt;10)까지 반복</em></strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">num_list</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">num_list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">num_list</span><span class="p">[</span><span class="n">min_index</span><span class="p">]:</span> 
                <span class="n">min_index</span> <span class="o">=</span> <span class="n">j</span>
</code></pre></div></div>
<p><strong>설명</strong></p>
<ol>
  <li>최초 실행시에는 i=0 -&gt; min_index에 저장이 되어 두번째 반복문에서는 j=i+1 -&gt; j=0+1 된다.</li>
  <li><strong>num_list[j] &lt; num_list[min_index]</strong> 이는 <br />
 2-1. <strong>num_list[1] &lt; num_list[0]</strong> 즉, <br />
 2-2. <strong>55 &lt; 33</strong> 이와 같다.</li>
  <li>2-2 결과가 <strong><span style="color:red">False</span></strong> 이므로 다시 두번째 반복문으로 시작한다.</li>
  <li>조건이 될 때까지 반복문은 증감하며 계속 실행이 되므로 j는 1이 증가하여 j=0+1+1, 즉 2가 된다.</li>
  <li><strong>num_list[j] &lt; num_list[min_index]</strong> 이는
 5-1. <strong>num_list[2] &lt; num_list[0]</strong> 즉, <br />
 5-2. <strong>19 &lt; 33</strong> 이와 같다.</li>
  <li>5-2 결과가 <strong><span style="color:blue">True</span></strong> 이므로 현재 j의 위치를 min_index에 저장해준다.</li>
  <li>위와같이 num_list의 길이만큼 반복한다.</li>
</ol>

<blockquote>
  <p>Why, 두번째 반복문은 i+1부터 시작하나요?</p>
  <blockquote>
    <p>두번째 반복문은 i번째(or min_index)의 위치한 값보다 작은 값을 찾는 코드이므로 i번째부터 시작할 경우 문제가 생길 요지가 있어 다음 요소부터 시작한다.</p>
  </blockquote>
</blockquote>

<p><br /></p>

<p><strong><em>3-3) 두번째 반복문이 끝난 후, 최솟값의 위치와 현재 i의 위치를 이용하여 서로 값을 바꿔준다.</em></strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="n">min_value</span> <span class="o">=</span> <span class="n">num_list</span><span class="p">[</span><span class="n">min_index</span><span class="p">]</span> 
        <span class="n">num_list</span><span class="p">[</span><span class="n">min_index</span><span class="p">]</span> <span class="o">=</span> <span class="n">num_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">num_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">min_value</span>
</code></pre></div></div>
<p><strong>설명</strong> <br />
<span style="color:red;font-weight:bold">num_list[0]</span>에는 <span style="color:red;font-weight:bold">55</span>가 들어있고 <span style="color:blue;font-weight:bold">num_list[2]</span>에는 <span style="color:blue;font-weight:bold">19</span>가 들어있다.</p>

<p>서로 바꿔주기위해 <span style="color:blue;font-weight:bold">19(num_list[2])</span>를 <span style="color:green;font-weight:bold">min_value</span>에 넣어주고 <span style="color:red;font-weight:bold">55(num_list[0])</span>를
<span style="color:blue;font-weight:bold">19(num_list[2])</span>의 공간에 저장해준다.</p>

<table>
  <thead>
    <tr>
      <th>변수</th>
      <th>기존</th>
      <th>변경</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>min_value</td>
      <td>-</td>
      <td>19</td>
    </tr>
    <tr>
      <td>min_list[0]</td>
      <td>55</td>
      <td>-</td>
    </tr>
    <tr>
      <td>num_list[2]</td>
      <td>19</td>
      <td>55</td>
    </tr>
  </tbody>
</table>

<p><span style="color:red;font-weight:bold">55(num_list[0])</span>의 위치 에<span style="color:green;font-weight:bold">19(min_value)</span>를 저장해준다.</p>

<table>
  <thead>
    <tr>
      <th>변수</th>
      <th>기존</th>
      <th>변경</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>min_value</td>
      <td>19</td>
      <td>-</td>
    </tr>
    <tr>
      <td>num_list[0]</td>
      <td>55</td>
      <td>19</td>
    </tr>
    <tr>
      <td>num_list[2]</td>
      <td>-</td>
      <td>55</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>Why, min_value를 사용해야 하나요?</p>
  <blockquote>
    <p>간단한 예시로 복사 붙여넣기를 생각하면 된다. 두개의 브라우저의 주소를 각각 바꾸려고한다.  <br />
크롬에는 <span style="color:red;font-weight:bold">A주소</span>를 
<span style="color:blue;font-weight:bold">B주소</span>로, 
사파리에는 <span style="color:blue;font-weight:bold">B주소</span>를 
<span style="color:red;font-weight:bold">A주소</span>로 바꾸려고할 때, <br />
<span style="color:blue;font-weight:bold">B주소</span>를 복사한 채로 크롬에 붙여 넣게되면, <span style="color:red;font-weight:bold">A주소</span>가 사라져버린다. 반대로 해도 결과는 똑같으므로 메모장 같은 곳에 <span style="color:green;font-weight:bold">한개의 주소</span>를 붙여넣고 처리를 하면 원래의 목적대로 이룰 수 있는 것과 같이, min_value의 사용 이유도 같다.</p>
  </blockquote>
</blockquote>

<h2 id="4_-시간복잡도-번외">4_ [시간복잡도] 번외</h2>
<p>개요에서 말했듯이 시간복잡도는 최선, 평균, 최악이 모두가 <strong>n^2</strong>이다. <br />
num_list의 길이를 <strong>50,000</strong>로 설정을 하고 1부터 50,000까지 무작위 수를 정렬할때 걸린 시간은 <span style="color:red;font-weight:bold">71.77786 sec</span>이다. 이것보다 더 오래 걸릴 수도 있고, 낮은 수의 요소들이 앞쪽에 배치되어있다면 이것보다 덜 걸릴 수도있다.</p>

<h2 id="5_-최종코드">5_ 최종코드</h2>

<p><a href="https://mmmmins.github.io/blog/algorithm/2023-03-11-algorithm-sort/">Java코드 Url</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">num_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">while</span> <span class="nf">len</span><span class="p">(</span><span class="n">num_list</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
    <span class="n">temp</span> <span class="o">=</span> <span class="n">num</span><span class="p">.</span><span class="nf">randrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">101</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">temp</span> <span class="ow">in</span> <span class="n">num_list</span><span class="p">:</span>
        <span class="k">continue</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">num_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">num_list</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">num_list</span><span class="p">)):</span>
    <span class="n">min_index</span> <span class="o">=</span> <span class="n">i</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">num_list</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">num_list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">num_list</span><span class="p">[</span><span class="n">min_index</span><span class="p">]:</span>
            <span class="n">min_index</span> <span class="o">=</span> <span class="n">j</span>

    <span class="n">min_value</span> <span class="o">=</span> <span class="n">num_list</span><span class="p">[</span><span class="n">min_index</span><span class="p">]</span>
    <span class="n">num_list</span><span class="p">[</span><span class="n">min_index</span><span class="p">]</span> <span class="o">=</span> <span class="n">num_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="n">num_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">min_value</span>
<span class="nf">print</span><span class="p">(</span><span class="n">num_list</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>KIM MINGYU</name><email>tommp1055@gmail.com</email></author><category term="blog" /><category term="algorithm" /><category term="sort" /></entry><entry><title type="html">블로그 게시글 테스트</title><link href="http://localhost:4000/blog/2021-01-15-%EB%B8%94%EB%A1%9C%EA%B7%B8%EA%B2%8C%EC%8A%A4%EA%B8%80/" rel="alternate" type="text/html" title="블로그 게시글 테스트" /><published>2021-01-15T12:45:51+09:00</published><updated>2023-03-11T14:48:19+09:00</updated><id>http://localhost:4000/blog/%EB%B8%94%EB%A1%9C%EA%B7%B8%EA%B2%8C%EC%8A%A4%EA%B8%80</id><content type="html" xml:base="http://localhost:4000/blog/2021-01-15-%EB%B8%94%EB%A1%9C%EA%B7%B8%EA%B2%8C%EC%8A%A4%EA%B8%80/"><![CDATA[]]></content><author><name>KIM MINGYU</name><email>tommp1055@gmail.com</email></author><category term="blog" /><category term="blog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">프로젝트 게시글 테스트</title><link href="http://localhost:4000/project/2021-01-14-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EA%B2%8C%EC%8B%9C%EA%B8%80/" rel="alternate" type="text/html" title="프로젝트 게시글 테스트" /><published>2021-01-14T12:45:51+09:00</published><updated>2023-03-11T14:48:19+09:00</updated><id>http://localhost:4000/project/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EA%B2%8C%EC%8B%9C%EA%B8%80</id><content type="html" xml:base="http://localhost:4000/project/2021-01-14-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EA%B2%8C%EC%8B%9C%EA%B8%80/"><![CDATA[]]></content><author><name>KIM MINGYU</name><email>tommp1055@gmail.com</email></author><category term="project" /><category term="project" /><summary type="html"><![CDATA[]]></summary></entry></feed>